(define (copy-row row)
  (let ((cols (vector-length row)))
    (let ((new-row (make-vector cols)))
      (let loop ((j 0)) (when (< j cols) (vector-set! new-row j (vector-ref row j)) (loop (+ j 1))) new-row))))

(define (copy-grid original-grid)
  (let ((rows (vector-length original-grid)))
    (let loop ((i 0) (new-grid (make-vector rows)))  ; Create the new grid
      (if (< i rows) (begin (vector-set! new-grid i (copy-row (vector-ref original-grid i))) (loop (+ i 1) new-grid)) new-grid))))


(define num-col-row 50)
(define pause-num 90000)
(define size (floor (/ 700 num-col-row)))
(define obstacle-density 20)
(load "grid-class.ss")
(load "grid-draw.ss")
(load "grid-make.ss")

(define grid0 (make-grid num-col-row))

(draw-obstacles grid0)
(define grid (convert-grid grid0))
(load "grid-new.ss")
(load "grid-RTA.ss")
(set-goal grid)
(set-start grid)
(define grid-copy (copy-grid grid))
(define start-copy (list (car start) (cadr start)))
(define goal-copy (list (car goal) (cadr goal)))
(define robot-copy (list (car robot) (cadr robot)))
(draw-start)
(draw-goal)
(draw-robot)
(display "START COPY :")
(display start-copy)
(newline)
(show canvas)
(search-rta grid 20000)
; ==============================

(load "grid-class.ss")
(load "grid-draw.ss")
(load "grid-make.ss")
(draw-obstacles grid0)
(define grid grid-copy)
(set! start start-copy)
(set! goal goal-copy)
(set! robot robot-copy)
(load "grid-new.ss")
(load "grid-HC.ss")
(draw-start)
(draw-goal)
(draw-robot)
(show canvas)
(search-hc grid 20000)

; =============================
(display "BOTH SEARCHES ARE DONE")
(newline)
(display "REAL-TIME A* FINAL SCORE ")
(display rta-count)
(newline)
(display "HILL-CLIMBER FINAL SCORE ")
(display hc-count)
(newline)
(set! total-rta (+ total-rta rta-count))
(set! total-hc (+ total-hc hc-count))
